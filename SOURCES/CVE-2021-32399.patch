From d50512e6312824861ce342eb68bb1eb7dea984e2 Mon Sep 17 00:00:00 2001
From: Artem Savkov <asavkov@redhat.com>
Date: Mon, 21 Jun 2021 12:09:28 +0200
Subject: [PATCH] bluetooth: eliminate the potential race condition when
 removing the HCI controller

Kernels:
4.18.0-305.el8
4.18.0-305.3.1.el8_4
4.18.0-305.7.1.el8_4

Changes since last build:
[x86_64]:
hci_request.o: changed function: hci_req_sync

[ppc64le]:
hci_request.o: changed function: bg_scan_update
hci_request.o: changed function: connectable_update_work
hci_request.o: changed function: discov_off
hci_request.o: changed function: discov_update
hci_request.o: changed function: discoverable_update_work
hci_request.o: changed function: hci_req_sync
hci_request.o: changed function: le_scan_disable_work
hci_request.o: changed function: le_scan_restart_work
hci_request.o: changed function: scan_update_work

---------------------------

Kernels:
4.18.0-305.el8
4.18.0-305.3.1.el8_4
4.18.0-305.7.1.el8_4

Modifications: none
Z-MR: https://gitlab.com/redhat/rhel/src/kernel/rhel-8/-/merge_requests/804

commit 84466ca3bdf0d5d77d4c8a851336406627de2628
Author: Gopal Tiwari <gtiwari@redhat.com>
Date:   Mon Jun 14 13:47:30 2021 +0530

    bluetooth: eliminate the potential race condition when removing the HCI controller

    Bugzilla: https://bugzilla.redhat.com/1971464
    CVE: CVE-2021-32399
    Y-Commit: 54c81477df19422cbc3c8cf3b555159ff642f15b

    O-Bugzilla: https://bugzilla.redhat.com/show_bug.cgi?id=1971488

    Upstream: Merged

    Testing: Sanity_only.

    commit e2cb6b891ad2b8caa9131e3be70f45243df82a80
    Author: Lin Ma <linma@zju.edu.cn>
    Date:   Mon Apr 12 19:17:57 2021 +0800

    bluetooth: eliminate the potential race condition when removing the HCI controller

    There is a possible race condition vulnerability between issuing a HCI
    command and removing the cont.  Specifically, functions hci_req_sync()
    and hci_dev_do_close() can race each other like below:

    thread-A in hci_req_sync()      |   thread-B in hci_dev_do_close()
                                    |   hci_req_sync_lock(hdev);
    test_bit(HCI_UP, &hdev->flags); |
    ...                             |   test_and_clear_bit(HCI_UP, &hdev->flags)
    hci_req_sync_lock(hdev);        |
                                    |
    In this commit we alter the sequence in function hci_req_sync(). Hence,
    the thread-A cannot issue th.

    Signed-off-by: Lin Ma <linma@zju.edu.cn>
    Cc: Marcel Holtmann <marcel@holtmann.org>
    Fixes: 7c6a329e4447 ("[Bluetooth] Fix regression from using default link policy")
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    (cherry picked from commit e2cb6b891ad2b8caa9131e3be70f45243df82a80)
    Signed-off-by: Gopal Tiwari <gtiwari@redhat.com>
    Signed-off-by: Jan Stancek <jstancek@redhat.com>

Signed-off-by: Artem Savkov <asavkov@redhat.com>
Acked-by: Yannick Cote <ycote@redhat.com>
Acked-by: Joe Lawrence <joe.lawrence@redhat.com>
---
 net/bluetooth/hci_request.c | 12 ++++++++----
 1 file changed, 8 insertions(+), 4 deletions(-)

diff --git a/net/bluetooth/hci_request.c b/net/bluetooth/hci_request.c
index cf1b42ec40af97..ca9088d439460e 100644
--- a/net/bluetooth/hci_request.c
+++ b/net/bluetooth/hci_request.c
@@ -274,12 +274,16 @@ int hci_req_sync(struct hci_dev *hdev, int (*req)(struct hci_request *req,
 {
 	int ret;
 
-	if (!test_bit(HCI_UP, &hdev->flags))
-		return -ENETDOWN;
-
 	/* Serialize all requests */
 	hci_req_sync_lock(hdev);
-	ret = __hci_req_sync(hdev, req, opt, timeout, hci_status);
+	/* check the state after obtaing the lock to protect the HCI_UP
+	 * against any races from hci_dev_do_close when the controller
+	 * gets removed.
+	 */
+	if (test_bit(HCI_UP, &hdev->flags))
+		ret = __hci_req_sync(hdev, req, opt, timeout, hci_status);
+	else
+		ret = -ENETDOWN;
 	hci_req_sync_unlock(hdev);
 
 	return ret;
-- 
2.26.3

